@typeparam T

<TypeAhead SearchMethod="@((string searchText) => SearchMethod(searchText))"
           ValueChanged="@((T item) => SelectedElement(item))"
           >
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</TypeAhead>

<ul class="list-group">
    @foreach (var item in SelectedElements)
    {
        <li draggable="true" @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(()=>HandleDragOver(item))" class="list-group-item list-group-item-action"
            >
            @MyListTemplate(item)
            <span @onclick="@(() => SelectedElements.Remove(item))">X</span>
        </li>
    }
</ul>


@code {
    [Parameter] public List<T> SelectedElements { get; set; } = new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> MyResultTemplate { get; set; }
    [Parameter] public RenderFragment<T> MyListTemplate { get; set; }

    private T draggedItem;

    private void SelectedElement(T item)
    {
        if (!SelectedElements.Any(x => x.Equals(item))){
            SelectedElements.Add(item);
        }
    }

    private void HandleDragStart(T item)
    {
        Console.WriteLine("In DragStart");
        draggedItem = item;
    }

    private void HandleDragOver(T item)
    {
        Console.WriteLine("In DragOverEntry");
        Console.WriteLine(item.ToString());
        Console.WriteLine(draggedItem.ToString());
        if (!draggedItem.Equals(item))
        {
            Console.WriteLine("In DragOverSuccess");
            var dragElementIndex = SelectedElements.IndexOf(draggedItem);
            var elementIndex = SelectedElements.IndexOf(item);
            SelectedElements[elementIndex] = draggedItem;
            SelectedElements[dragElementIndex] = item;
            StateHasChanged();
        }
    }


}
