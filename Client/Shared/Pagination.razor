<h3>Pagination</h3>

<nav>
    <ul class="pagination justify-content-center">
        @foreach (var link in Links)
        {
            <li @onclick="@(() => SelectPageInternal(link))"
                style="cursor:pointer" class="page-link @(link.Enabled ? null : "disabled")">
                <span class="page-link" href="#">
                @link.Text
                </span>
             </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int Radius { get; set; } = 3;
    [Parameter] public EventCallback<int> PageChanged { get; set; }

    List<LinkModel> Links;

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnInitialized();
    }

    private void LoadPages ()
    {
        Links = new List<LinkModel>();

        Links.Add(new LinkModel(CurrentPage - 1, CurrentPage != 1, "Previous"));
        for (int i=1; i<= TotalPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                Links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }
        Links.Add(new LinkModel(CurrentPage+1, CurrentPage != TotalPages, "Next"));
        Console.WriteLine($"Total1 page: {TotalPages}");
    }

    private async Task SelectPageInternal(LinkModel link)
    {
        Console.Write(Newtonsoft.Json.JsonConvert.SerializeObject(link));
        Console.WriteLine($"Current page: {CurrentPage}");
        Console.WriteLine($"Total2 page: {TotalPages}");
        if (link.Page == CurrentPage)
        {
            return;
        }
        if (!link.Enabled)
        {
            return;
        }
        CurrentPage = link.Page;
        await PageChanged.InvokeAsync(CurrentPage);
    }

    class LinkModel
    {
        public LinkModel(int page)
            :this(page, true)
        {

        }

        public LinkModel (int page, bool enabled)
            :this(page, enabled, page.ToString())
        {

        }


        public LinkModel (int page, bool enabled, string text)
        {
            this.Text = text;
            this.Page = page;
            this.Enabled = enabled;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; }
        public bool Active { get; set; }
    }

}
