@page "/movie/{MovieId:int}"
@page "/movie/{MovieId:int}/{MovieName}"
@inject IMovieRepository movieRepo

@if (model == null)
{
    <text>Loading...</text>
}
else
{
    <h3>@model.Title (@model.ReleaseDate.Value.ToString("yyyy"))</h3>
    var count = model.Genres.Count();
    @count
    for (int i=0;i<count; i++)
    {
        
       @linkGenres(model.Genres[i]);
        
    }
    <div style="display:flex;">
        <span style="display:inline-block; margin-right:5px;"><img src="@model.Poster" /></span>
    </div>
    <div style="margin-top:10px;">
        <h3>Summary</h3>
        <RenderMarkdown MarkdownContent="@model.Summary"></RenderMarkdown>
    </div>
    <div style="margin-top:3px;">
        @foreach (var actor in model.Actors)
        {
            <div style="margin-bottom:2px;">
                <img style="width:50px;" src="@actor.Picture" />
                <span style="display:inline-block; width:200px;"><a href="/person/@actor.Id/@actor.Name.Replace(" ","-")">@actor.Name</a></span>
                <span style="display:inline-block">@actor.Character</span>
            </div>
        }
    </div>
}


@code {
    [Parameter] public int MovieId { get; set; }
    [Parameter] public string MovieName { get; set; }
    private RenderFragment<GenreDTO> linkGenres = (genre) => @<a href="movies/search?genreId=@genre.Id">@genre.Name</a>;
    MovieDTO model;

    protected async override Task OnInitializedAsync()
    {
        model = await movieRepo.GetMovieDTO(MovieId);
        //Console.WriteLine($"Movie Id is {MovieId}");
        base.OnInitialized();
    }
}
